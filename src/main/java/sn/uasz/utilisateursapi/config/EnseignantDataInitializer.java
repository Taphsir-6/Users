package sn.uasz.utilisateursapi.config;

import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Configuration;
import sn.uasz.utilisateursapi.dtos.EnseignantDTO;
import sn.uasz.utilisateursapi.repositories.EnseignantRepository;
import sn.uasz.utilisateursapi.services.EnseignantService;
import sn.uasz.utilisateursapi.enums.Grade;

import java.time.LocalDate;

/**
 * Composant Spring responsable de l'initialisation des donn√©es d'enseignants lors du d√©marrage de l'application.
 *
 * Cette classe impl√©mente {@link CommandLineRunner}, ce qui permet d'ex√©cuter du code au d√©marrage de l'application.
 * Elle ins√®re des enseignants de test si leurs adresses email ne sont pas d√©j√† pr√©sentes dans la base de donn√©es.
 */
@Configuration
@RequiredArgsConstructor
public class EnseignantDataInitializer implements CommandLineRunner {

    /** Logger pour journaliser les op√©rations d'initialisation. */
    private static final Logger logger = LoggerFactory.getLogger(EnseignantDataInitializer.class);

    /** Service m√©tier pour la gestion des enseignants. */
    private final EnseignantService enseignantService;

    /** Repository direct d'acc√®s aux enseignants. */
    private final EnseignantRepository enseignantRepository;

    /**
     * M√©thode ex√©cut√©e automatiquement au d√©marrage de l'application.
     * Elle appelle la m√©thode interne pour ins√©rer les enseignants de test.
     *
     * @param args arguments de la ligne de commande (non utilis√©s ici)
     */
    @Override
    public void run(String... args) {
        insererEnseignantsTest();
    }

    /**
     * Cr√©e et ins√®re un enseignant de test si son email n'existe pas d√©j√† en base.
     *
     * @param nom nom de l'enseignant
     * @param prenom pr√©nom de l'enseignant
     * @param email adresse email professionnelle
     * @param telephone num√©ro de t√©l√©phone
     * @param matricule matricule unique
     * @param grade grade acad√©mique
     * @param createdBy utilisateur ayant cr√©√© la donn√©e
     * @return true si l'insertion a r√©ussi ou √©tait d√©j√† pr√©sente, false sinon
     */
    private boolean creerEnseignantTest(String nom, String prenom, String email, String telephone, String matricule, Grade grade, String createdBy) {
        try {
            if (enseignantRepository.existsByEmail(email)) {
                logger.info("üîÅ Enseignant avec l'email {} existe d√©j√†. Insertion ignor√©e.", email);
                return true;
            }

            EnseignantDTO dto = new EnseignantDTO(
                    null,              // ID auto-g√©n√©r√©
                    nom,
                    prenom,
                    email,
                    telephone,
                    matricule,
                    grade,
                    createdBy,
                    LocalDate.now(),
                    true               // Actif par d√©faut
            );

            enseignantService.ajouterEnseignant(dto);
            logger.info("‚úÖ Enseignant {} {} ins√©r√© avec succ√®s.", prenom, nom);
            return true;

        } catch (Exception e) {
            logger.error("‚ùå √âchec d'insertion pour {} {} : {}", prenom, nom, e.getMessage(), e);
            return false;
        }
    }

    /**
     * Ins√®re une liste d'enseignants pr√©d√©finis √† des fins de test.
     * Utilise la m√©thode {@link #creerEnseignantTest} pour chaque enseignant.
     */
    private void insererEnseignantsTest() {
        boolean success = true;

        success &= creerEnseignantTest("Diop", "Ibrahima", "diop.ibrahima@uasz.sn", "+221771012233", "181185/D", Grade.PROFESSEUR_ASSIMILE, "admin");
        success &= creerEnseignantTest("Fall", "Modou", "fall.modou@uasz.sn", "+221772023344", "181186/A", Grade.VACATAIRE, "admin");
        success &= creerEnseignantTest("Ndiaye", "Ibrahima", "ndiaye.ibrahima@uasz.sn", "+221773034455", "181187/B", Grade.VACATAIRE, "admin");

        if (success) {
            logger.info("\n Tous les enseignants ont √©t√© ins√©r√©s avec succ√®s !");
        } else {
            logger.warn("\n Certains enseignants n'ont pas pu √™tre ins√©r√©s !");
        }
    }
}
